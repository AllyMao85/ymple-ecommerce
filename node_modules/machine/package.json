{
  "_args": [
    [
      {
        "raw": "machine@^15.0.0-21",
        "scope": null,
        "escapedName": "machine",
        "name": "machine",
        "rawSpec": "^15.0.0-21",
        "spec": ">=15.0.0-21 <16.0.0",
        "type": "range"
      },
      "/Users/fabienthetis/Documents/2017.10/Project_ymple/PRODUCT/ymple-commerce-1.0/node_modules/sails"
    ]
  ],
  "_from": "machine@>=15.0.0-21 <16.0.0",
  "_id": "machine@15.0.0-21",
  "_inCache": true,
  "_location": "/machine",
  "_nodeVersion": "8.1.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/machine-15.0.0-21.tgz_1513645253797_0.7285188469104469"
  },
  "_npmUser": {
    "name": "mikermcneil",
    "email": "npm@sailsjs.com"
  },
  "_npmVersion": "5.2.0",
  "_phantomChildren": {
    "@sailshq/lodash": "3.10.2",
    "validator": "4.4.0"
  },
  "_requested": {
    "raw": "machine@^15.0.0-21",
    "scope": null,
    "escapedName": "machine",
    "name": "machine",
    "rawSpec": "^15.0.0-21",
    "spec": ">=15.0.0-21 <16.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/machine-as-action",
    "/sails",
    "/whelk"
  ],
  "_resolved": "https://registry.npmjs.org/machine/-/machine-15.0.0-21.tgz",
  "_shasum": "4c45d178faff4af37e0449f52b6e46a44092bd84",
  "_shrinkwrap": null,
  "_spec": "machine@^15.0.0-21",
  "_where": "/Users/fabienthetis/Documents/2017.10/Project_ymple/PRODUCT/ymple-commerce-1.0/node_modules/sails",
  "author": {
    "name": "The Sails Company"
  },
  "bugs": {
    "url": "http://sailsjs.com/bugs"
  },
  "dependencies": {
    "@sailshq/lodash": "^3.10.2",
    "anchor": "^1.2.0",
    "flaverr": "^1.7.0",
    "parley": "^3.1.0",
    "rttc": "^10.0.0-3"
  },
  "description": "Build functions in standardized containers.",
  "devDependencies": {
    "async": "2.0.1",
    "benchmark": "2.1.0",
    "eslint": "4.11.0",
    "mocha": "3.0.2",
    "test-machinepack-mocha": "^2.1.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-04VgLV+kqUa6Cnjnkw/nPsxWHaJe9pJyz/Hch1mcmetmIzEo+21i3gddLLalr20pGrEjn/ZMNmj9+zXhRDlzgA==",
    "shasum": "4c45d178faff4af37e0449f52b6e46a44092bd84",
    "tarball": "https://registry.npmjs.org/machine/-/machine-15.0.0-21.tgz"
  },
  "docs": {
    "url": "http://node-machine.org/spec"
  },
  "engines": {
    "node": ">= 4.0.0",
    "npm": ">= 2.0.0"
  },
  "gitHead": "afaa6590f86987564c1a56809c5fa92fae0ea97f",
  "homepage": "https://github.com/node-machine/machine#readme",
  "keywords": [
    "functions",
    "containers",
    "validation",
    "coercion",
    "type-checking",
    "data-types"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tblobaum",
      "email": "tblobaum@gmail.com"
    },
    {
      "name": "balderdashy",
      "email": "mike@balderdash.co"
    },
    {
      "name": "sgress454",
      "email": "sgress454@treeline.io"
    },
    {
      "name": "particlebanana",
      "email": "particlebanana@gmail.com"
    },
    {
      "name": "mikermcneil",
      "email": "npm@sailsjs.com"
    }
  ],
  "name": "machine",
  "optionalDependencies": {},
  "readme": "<h1>\n  <a href=\"http://node-machine.org\"><img alt=\"node-machine logo\" title=\"The Node-Machine Project\" src=\"http://node-machine.org/images/machine-anthropomorph-for-white-bg.png\" width=\"50\" /></a>\n  machine (runner)\n</h1>\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/balderdashy/sails?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\nA runner for functions written in JavaScript.  Machines are atomic, context-free bits of code which conform to the [machine specification](http://node-machine.org/spec/machine): an open standard for functions and subroutines.\n\n> **Chances are you don't need to use this module directly**- see [About This Module](https://github.com/node-machine/machine#about-this-module) below for info.\n\n\n## Installation &nbsp;  [![NPM version](https://badge.fury.io/js/machine.svg)](http://badge.fury.io/js/machine)  [![Build Status](https://travis-ci.org/node-machine/machine.png?branch=master)](https://travis-ci.org/node-machine/machine)\n\n**With [node](http://nodejs.org) [installed](http://sailsjs.com/get-started):**\n```sh\n# Get the machine runner\n$ npm install machine --save\n```\n\n\n## Usage\n\n#### .build()\n\nCall `Machine.build()` (or just `Machine()`) with a machine definition to build a callable function:\n\n```js\nconst Machine = require('machine');\n\nconst callable = Machine({\n  identity: 'do-something',\n  inputs: {\n    foo: { type: 'string', required: true }\n  },\n  fn: function(inputs, exits){\n    let result = `The result, based on ${inputs.foo}.`;\n    return exits.success(result);\n  }\n});//ƒ\n\nlet result = await callable({foo: 'bar'});\nconsole.log(result);\n\n// => 'The result, based on \"bar\"'.\n```\n\n##### Machine definitions\n\nA machine definition is a dictionary (plain JavaScript object) that describes the implementation of a function, according to the [specification](http://node-machine.org/spec).\n\nBy itself, a machine definition can be programmatically parsed for things like generating documentation and tests, performing static analysis, enabling IDE plugins with features such as code completion and high-level linting, inferring user interface elements such as forms, and much more.\n\nBut to actually _use_ a machine definition in your code, you need some kind of runner.  That's what this module is for:\n\n```js\n\nconst Machine = require('machine');\nconst def = { /* … */ };\nconst callable = Machine(def);\n```\n\n##### Callables\n\nA \"callable\" (or \"wet machine\") is a function returned after building a machine.  It has standard usage out of the box (unless you used `buildWithCustomUsage()`).\n\n```js\nlet argins = { /*…*/ };\nlet result = await callable(argins);\n```\n\nIt also has some additional custom methods, available as properties:\n\n- `callable.getDef()`\n- `callable.customize()`\n\n\n##### Deferreds\n\nInvoking a \"callable\" returns a Deferred instance, that can be used with async/await:\n\n```js\nlet deferred = callable(argins);\nlet result = await deferred;\n```\n\nIt also supports some other methods, such as:\n\n- `deferred.log()`\n- `deferred.then()`\n- `deferred.catch()`\n- `deferred.exec()`\n- `deferred.switch()`\n- `deferred.meta()`\n\n> See [parley](https://github.com/mikermcneil/parley) for more information.\n\n\n#### .pack()\n\nCall `Machine.pack()` to construct a \"machinepack\", a JavaScript (usually Node.js) package of callable functions:\n\n```js\nconst mp = Machine.pack({\n  dir: __dirname,\n  pkg: require('./package.json')\n});\n```\n\n##### Machinepacks\n\nMachinepacks are simple dictionaries (plain JavaScript objects) that expose a set of \"callables\" as methods.\n\nThey also support one built-in method:\n\n- `mp.customize()`\n\n\n#### .VERSION\n\nThe current version of the machine runner.\n\n```js\nconsole.log(Machine.VERSION);\n\n// => '15.0.0-3'\n```\n\n\n#### .getMethodName()\n\nGet the proper method name for a machine definition.\n\n```js\nconst methodName = Machine.getMethodName({\n  identity: 'do-something-cool',\n  friendlyName: 'Do summthin real neat',\n  description: 'Do something quite skillful and well-balanced.',\n  inputs: {/*…*/},\n  exits: {/*…*/},\n  fn: function(inputs, exits) { /*…*/ return exits.success(); }\n});//ƒ\n\nconsole.log('.'+methodName+'()');\n\n//=> '.doSomethingCool()'\n```\n\n\n\n#### .buildWithCustomUsage()\n\n> Experimental.\n\n```js\nconst customCallable = Machine.buildWithCustomUsage({\n  arginStyle: 'serial',\n  execStyle: 'immediate',\n  def: {\n    identity: 'do-something',\n    sync: true,\n    args: ['foo', 'bar'],\n    inputs: {\n      foo: { type: 'string', required: true },\n      bar: { type: 'number' },\n    },\n    fn: function(inputs, exits){\n      let result = `The result, based on ${inputs.foo}`;\n      if (inputs.bar) {\n        result += ` and ${inputs.bar}.`;\n      }\n      return exits.success(result);\n    }\n  }\n});//ƒ\n\nlet result = customCallable('abc', 123);\nconsole.log(result);\n\n// => 'The result, based on \"abc\" and \"123\"'.\n```\n\n\n\n\n## Benchmarks\n\nAs of [morning, Friday, August 18, 2017](https://github.com/node-machine/machine/tree/35548a4a1425d5a21bff481470a615c0561a536b), without any build-time normalization of definitions, and with runtime data type validation disabled:\n\n```\n∑ NODE_ENV=production npm run bench\n\n> machine@15.0.0-3 bench /Users/mikermcneil/code/machine\n> node ./node_modules/mocha/bin/mocha -R dot --recursive -b test/benchmarks/\n\n\n\n   o\n\n       •\n      o                  .\n       •                •\n        •                •\n                •       o\n                            •        o\n o   •              •          o   •\n      o              o         •\n  •  •      •       •      •    •\n           •      •              o\n  •    b e n c h m a r k s      •\n   •        •\n •                        ___  •\n    • o •    •      •    /o/•\\_   •\n       •   •  o    •    /_/\\ o \\_ •\n       o    O   •   o • •   \\ o .\\_\n          •       o  •       \\. O  \\\n\n • sanity_check x 794,661 ops/sec ±0.47% (85 runs sampled)\n • build_very_simple_machine x 152,975 ops/sec ±0.54% (84 runs sampled)\n • build_machine_with_inputs_and_exits_but_nothing_crazy x 129,236 ops/sec ±0.56% (84 runs sampled)\n • build_machine_with_inputs_and_exits_that_have_big_ole_exemplars x 122,899 ops/sec ±0.91% (82 runs sampled)\n • build_machine_with_crazy_numbers_of_inputs_and_exits x 81,030 ops/sec ±0.77% (81 runs sampled)\n • build_machine_with_crazy_numbers_of_inputs_and_exits_and_is_cacheable x 79,177 ops/sec ±0.75% (85 runs sampled)\n • build_machine_with_crazy_numbers_of_inputs_and_exits_with_huge_exemplars x 89,338 ops/sec ±0.64% (83 runs sampled)\n • build_machine_with_crazy_numbers_of_inputs_and_exits_with_ref_exemplars x 76,974 ops/sec ±0.67% (84 runs sampled)\nFastest is sanity_check\nSlowest is build_machine_with_crazy_numbers_of_inputs_and_exits_with_ref_exemplars\n\n  ․ • sanity_check x 755,851 ops/sec ±0.77% (85 runs sampled)\n • exec_very_simple_machine x 37,835 ops/sec ±3.80% (69 runs sampled)\n • exec_machine_with_inputs_and_exits_but_nothing_crazy x 32,015 ops/sec ±3.66% (62 runs sampled)\n • exec_machine_with_inputs_and_exits_that_have_big_ole_exemplars x 30,895 ops/sec ±3.49% (62 runs sampled)\n • exec_machine_with_crazy_numbers_of_inputs_and_exits x 22,669 ops/sec ±2.97% (72 runs sampled)\n • exec_machine_with_crazy_numbers_of_inputs_and_exits_and_is_cacheable x 21,708 ops/sec ±3.04% (69 runs sampled)\n • exec_machine_with_crazy_numbers_of_inputs_and_exits_with_huge_exemplars x 23,585 ops/sec ±3.41% (69 runs sampled)\n • exec_machine_with_crazy_numbers_of_inputs_and_exits_with_ref_exemplars x 21,805 ops/sec ±2.41% (65 runs sampled)\nFastest is sanity_check\nSlowest is exec_machine_with_crazy_numbers_of_inputs_and_exits_and_is_cacheable,exec_machine_with_crazy_numbers_of_inputs_and_exits_with_ref_exemplars\n․ • sanity_check x 712,777 ops/sec ±1.00% (81 runs sampled)\n • execSync_very_simple_machine x 36,050 ops/sec ±4.42% (69 runs sampled)\n • execSync_machine_with_inputs_and_exits_but_nothing_crazy x 30,311 ops/sec ±2.72% (57 runs sampled)\n • execSync_machine_with_inputs_and_exits_that_have_big_ole_exemplars x 29,416 ops/sec ±3.81% (62 runs sampled)\n • execSync_machine_with_crazy_numbers_of_inputs_and_exits x 21,353 ops/sec ±3.84% (69 runs sampled)\n • execSync_machine_with_crazy_numbers_of_inputs_and_exits_and_is_cacheable x 21,188 ops/sec ±3.76% (59 runs sampled)\n • execSync_machine_with_crazy_numbers_of_inputs_and_exits_with_huge_exemplars x 22,878 ops/sec ±3.49% (72 runs sampled)\n • execSync_machine_with_crazy_numbers_of_inputs_and_exits_with_ref_exemplars x 21,315 ops/sec ±2.43% (69 runs sampled)\nFastest is sanity_check\nSlowest is execSync_machine_with_crazy_numbers_of_inputs_and_exits_and_is_cacheable,execSync_machine_with_crazy_numbers_of_inputs_and_exits,execSync_machine_with_crazy_numbers_of_inputs_and_exits_with_ref_exemplars\n```\n\n\n\n## About this module\n\nBefore you read any further, let's stop and make sure you're in the right place.  The documentation in this README file is for low-level usage of `machine`, the JavaScript machine runner.  You don't need to use this module directly unless you're **building machines**.\n\nYou can find more information about the node-machine project on http://node-machine.org.  There you'll also find a short video from the introductory talk at [dotjs.eu](http://dotjs.eu/), an up-to-date list of all available machines on NPM, and standardized documentation pages with code examples you can copy and paste into your Node.js app (e.g. [Github.createRepo()](http://node-machine.org/machinepack-github/create-repo)).\n\nBuilding a machinepack?  Here are some tips:\n+ Start with [tutorial for implementors](http://node-machine.org/implementing/Getting-Started)\n+ Join the [newsgroup for the machine specification](https://groups.google.com/forum/?hl=en#!forum/node-machine) to get help from other machine implementors\n+ Don't forget to add the `\"repository\"` key to your package.json file so folks can find your source code (this enables the `View Source` button in the generated documentation on node-machine.org)\n+ Hit up [@mikermcneil](https://twitter.com/mikermcneil) on Twitter and let me know what you're working on!\n\n\n\n### OK what is this? How does it work?\n\nThis is a low-level module for building, configuring, and running machines.\n\nNormal users of machines won't interact with this module directly very often-- however it _is_ a dependency of every machinepack.  Its full list of responsibilities includes exposing the conventional machine usage, a `.exec()` helper (for familiarity with Waterline), as well as validating input expectations, coercing return values from exits, and more.\n\nThe `.build()` method accepts a machine definition object and returns a new ready-to-use machine instance function.  The `.pack()` method accepts a filesystem path and returns a ready-to-use machinepack obtained by requiring the module located at the path, loading its machine definitions into live machines (calling `.build()` on each definition), and validating that everything is up to spec.\n\nSo when you require a machinepack from NPM like so:\n\n```javascript\nvar Github = require('machinepack-github');\n```\n\nwhat's actually happening is that the `index.js` file in the machinepack module is calling `.pack()` and returning an object of ready-to-go machine instances.\n\n\n\n### Where would I use this module directly?\n\nThere are only two use-cases for requiring this module directly:\n\n##### 1. Your machinepack's boilerplate `index.js` file\n\n> Note that this is taken care of for you if you used the [Yeoman generator](https://github.com/node-machine/generator-machinepack) to create your machinepack.\n\nIf you're implementing a machinepack, you'll need to use this module to `.pack()` your machines in your `index.js` file.  Here's an [example of an `index.js` file](https://github.com/mikermcneil/machinepack-urls/blob/master/index.js#L2) (this example happens to come from machinepack-urls- your pack's `index.js` file should always look the same, no matter what).\n\n##### 2. A machine which uses another machine from the same pack\n\nNormally, if you want to use a machine _from inside of one of your machines_, you just install and require the other machinepack in _your_ pack and use it just like you would in app-level code.  But if you want to use another machine in the _same pack_, or you want the machine to call itself recursively, you should use this module directly.  You can read more information on this in the [FAQ for implementors](https://github.com/node-machine/docs/blob/master/creating-a-machinepack/FAQ.md).\n\n### Can I use this module outside of a machinepack?\n\nYou can use it anywhere you like!  For instance, you might want to implement a one-off machine in your app, perhaps to take advantage of caching or type-checking this module provides.\n\n> If you're using Sails, check out [`sails-hook-machines`](https://github.com/node-machine/sails-hook-machines), a hook which allows you to use custom closed-source machines in your Sails app by dropping files into the `api/machines/` folder.\n\n\n\n## Contributing\n\nIf you're interested in contributing to the machine specification, please request to join the project's [Google Group](https://groups.google.com/forum/?hl=en#!forum/node-machine) and introduce yourself to the rest of the core team.  In the mean time, you can check out the tests for information on how to use all the lower-level features of this module.  There is also a guide for direct usage of this module in [`docs/DIRECT_USAGE.md`](./docs/DIRECT_USAGE.md).  Note that you can run the tests for this module using `npm test`.  To re-generate the recursive dependency report (via the `licensing` module by 3rdEden), run `npm run licensing`.\n\n\n\n## Issue Submission\nMake sure you've read the [issue submission guidelines](https://sailsjs.com/bugs) from Sails before opening a new issue - the node-machine project uses the same rules.\n\nClick [here](https://github.com/balderdashy/sails/search?q=&type=Issues) to search/post issues.\n\n\n\n\n## License\n\nMIT\n&copy; 2014 Mike McNeil; &copy; 2015-2017 The Sails Company\n\nLike the [Sails framework](https://sailsjs.com), [this package](https://npmjs.com/package/machine) is available under the **MIT license**.\n\n![image_squidhome@2x.png](http://i.imgur.com/RIvu9.png)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/node-machine/machine.git"
  },
  "scripts": {
    "bench": "NODE_ENV=production node ./node_modules/mocha/bin/mocha -R dot --recursive -b test/benchmarks/",
    "custom-tests": "node ./node_modules/mocha/bin/mocha -R dot test/*.test.js",
    "lint": "node ./node_modules/eslint/bin/eslint . --max-warnings=0 --ignore-pattern 'test/' && echo '✔  Your code looks good.'",
    "sandbox": "node -i -e '_ = require(\"@sailshq/lodash\"); global[require(\"./package.json\").name] = require(\"./\"); console.log(\"\\n\\n\\n\\n--\");'",
    "test": "npm run lint && npm run custom-tests && npm run bench"
  },
  "version": "15.0.0-21"
}
